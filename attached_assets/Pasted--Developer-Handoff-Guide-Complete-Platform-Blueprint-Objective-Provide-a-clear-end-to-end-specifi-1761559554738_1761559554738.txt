
Developer Handoff Guide: Complete Platform Blueprint
Objective: Provide a clear, end-to-end specification for building a platform with dashboards for Models (content creators), Classified Users (viewers/posters), and Admins (via Directus), covering all features, integrations, and deployment.
1. Overview
Platform Features:
	•	User Types: Models, Classified Users, Admins.
	•	Core Functionality:
	◦	Listings: Create/edit/delete with tier-based limits.
	◦	Media: Image/video uploads via Bunny.net with deduplication for profile galleries.
	◦	Upgrades: Highlight, Specials, Slideshow, Paid Listing, Bump Anytime (purchased with Love Coins).
	◦	Titty Bank: Love Coin transactions via Bitcoin payments.
	◦	Available Now: 4-hour auto-disable with tier-specific cooldowns.
	◦	Bumps: Tier-specific cooldowns; Bump Anytime override.
	◦	Paid Listing Filter: Prioritize paid-tier or upgraded listings.
	◦	Reactive Moderation: User flagging with admin review in Directus.
	•	Admin Dashboard: Directus for managing users, tiers, upgrades, flagged content, banners, analytics.
Tech Stack:
	•	Frontend: Next.js (React), TypeScript, Tailwind CSS, Headless UI.
	•	Backend/Database: Supabase (Postgres) with Row-Level Security (RLS).
	•	Media Storage: Bunny.net (CDN + storage).
	•	Payments: Bitcoin gateway (e.g., BTCPay Server, OpenNode).
	•	Admin: Directus.
	•	State Management: React Query or SWR for real-time data.
	•	Form Handling: React Hook Form + Zod.
	•	Testing: Jest, React Testing Library, Cypress/Playwright.
	•	Monitoring: Sentry, Vercel Analytics, Supabase logs.
2. Database Schema
All tables use UUIDs for primary keys and include created_at/updated_at timestamps.
Table
Columns
Notes
users
id (uuid, PK), email (text), password_hash (text), role (enum: ‘model’, ‘classified_user’, ‘admin’), tier_id (uuid, FK), is_active (boolean)
Supabase Auth-managed. Role controls dashboard access.
tiers
id (uuid, PK), name (text), max_ads (integer), max_images (integer), max_videos (integer), available_now_cooldown (integer, hours), bump_cooldown_minutes (integer), discount_upgrades (integer, %)
Defines tier limits (e.g., Free, Basic, VIP, Elite).
listings
id (uuid, PK), user_id (uuid, FK), title (text), description (text), category_id (uuid, FK), location_id (uuid, FK), is_highlighted (boolean), highlight_expires (timestamp), is_special (boolean), has_slideshow (boolean), available_now_active (boolean), available_now_ends_at (timestamp), bump_next_available (timestamp), is_paid_listing (boolean), is_active (boolean)
Core listing data with upgrade/timer flags.
categories
id (uuid, PK), name (text), parent_id (uuid, FK, nullable)
Supports nested categories.
locations
id (uuid, PK), country (text), state (text, nullable), city (text, nullable)
Geographic data for listings.
media
id (uuid, PK), listing_id (uuid, FK), url (text), type (enum: ‘image’, ‘video’), hash (text), is_compressed (boolean)
Stores Bunny.net URLs with hashes for deduplication.
upgrades
id (uuid, PK), name (text), type (text), cost (integer, Love Coins), duration_hours (integer, nullable), max_active (integer, nullable)
Defines upgrades (e.g., Highlight, Paid Listing).
listing_upgrades
id (uuid, PK), listing_id (uuid, FK), upgrade_id (uuid, FK), purchased_at (timestamp), expires_at (timestamp, nullable), active (boolean)
Tracks purchased upgrades with expiration.
titty_bank_transactions
id (uuid, PK), user_id (uuid, FK), type (enum: ‘purchase’, ‘spend’, ‘refund’), amount (integer, Love Coins), description (text), related_listing_id (uuid, FK, nullable)
Tracks Love Coin transactions.
flagged_content
id (uuid, PK), listing_id (uuid, FK), reported_by (uuid, FK), reason (text), reviewed_by (uuid, FK, nullable), reviewed_at (timestamp, nullable), action_taken (text, nullable)
Supports reactive moderation.
Relationships:
	•	users: 1-to-many → listings, titty_bank_transactions, flagged_content (reported_by, reviewed_by).
	•	tiers: 1-to-many → users.
	•	listings: 1-to-many → listing_upgrades, media, flagged_content; many-to-one → users, categories, locations.
	•	upgrades: 1-to-many → listing_upgrades.
	•	categories: Self-referencing; 1-to-many → listings.
	•	locations: 1-to-many → listings.
Row-Level Security (RLS):
	•	users: Accessible only by user or admins.
	•	listings: Edit/delete only by owner (user_id = auth.uid()).
	•	titty_bank_transactions: Restricted to user or admins.
	•	flagged_content: Write by any user, read by listing owner or admins.
3. API Endpoints
Method
Path
Purpose
Request Body
Response
DB Effect
Frontend Hook
POST
/listings
Create listing
{title, description, category_id, location_id}
{listing_id, success}
Insert into listings; validate tier limits
useListings refetch
GET
/listings?user_id=
Fetch user listings
N/A
[{listing, media, upgrades}]
Query listings, media, listing_upgrades
useListings
GET
/listing/:id
Fetch single listing
N/A
{listing, media, upgrades}
Query listings, media, listing_upgrades
useListings, useUpgrades
PUT
/listing/:id
Update listing
{title, description, category_id, location_id}
{success}
Update listings; validate ownership
useListings refetch
DELETE
/listing/:id
Delete listing
N/A
{success}
Delete from listings; cascade media, listing_upgrades
useListings refetch
POST
/listing/:id/bump
Bump listing
N/A
{success, next_available}
Update listings.bump_next_available
useListings refetch
POST
/listing/:id/upgrade
Purchase upgrade
{upgrade_id}
{success, expires_at}
Insert listing_upgrades; deduct titty_bank_transactions
useUpgrades refetch
POST
/tittybank/purchase
Buy Love Coins
{amount_usd}
{success, pending, invoice_url}
Insert titty_bank_transactions; update balance on confirm
useTittyBank refetch
GET
/tittybank
Get balance & transactions
N/A
{balance, transactions: []}
Query titty_bank_transactions
useTittyBank
POST
/available-now/:listing_id/toggle
Toggle Available Now
{active: true/false}
{success, ends_at}
Update listings.available_now_active, available_now_ends_at
useListings refetch
POST
/media/upload
Upload media
{file}
{success, url, hash}
Insert media; store in Bunny.net
useMedia refetch
POST
/flag/:listing_id
Flag listing
{reason}
{success}
Insert into flagged_content
useFlaggedContent
GET
/upgrades
Fetch available upgrades
N/A
[{upgrade}]
Query upgrades with tier discounts
useUpgrades
GET
/dashboard-overview
Fetch dashboard summary
N/A
{listings_count, balance, active_upgrades, recent_activity}
Aggregate listings, listing_upgrades, titty_bank_transactions
useUserProfile, useTittyBank, useListings, useUpgrades
Notes:
	•	Use Supabase Edge Functions for atomic operations (e.g., upgrade purchase + coin deduction).
	•	Validate tier limits and ownership via RLS and backend checks.
	•	Handle Bitcoin payments via webhook callbacks.
4. Frontend Component Tree
Built with Next.js, the frontend uses a modular structure for Model and Classified User dashboards.
flowchart TD
  App[App] --> Header[Header: Logo, NavMenu, UserMenu, Notifications
useUserProfile, useTittyBank]
  App --> Sidebar[Sidebar: Dashboard, Listings, Upgrades, Titty Bank, Profile]
  App --> MainContent[MainContent]

  MainContent --> ModelDashboard[ModelDashboard]
  ModelDashboard --> DashboardOverview[DashboardOverview: TotalListingsCard, ActiveUpgradesCard, TittyBankCard, AvailableNowCard
useUserProfile, useTittyBank, useListings, useUpgrades]
  ModelDashboard --> ListingsPanel[ListingsPanel
useListings]
  ListingsPanel --> ListingCard[ListingCard: MediaCarousel, HighlightBadge, SpecialsBadge, AvailableNowBadge, AvailableNowToggle, BumpButton, UpgradeIcons, ListingActions
useMedia, useUpgrades, useListings]
  ModelDashboard --> UpgradePanel[UpgradePanel
useUpgrades, useTittyBank]
  UpgradePanel --> UpgradeCard[UpgradeCard: Name, Description, Cost, DiscountBadge, PurchaseButton --> ConfirmModal]
  UpgradePanel --> UpgradeHistory[UpgradeHistory]
  ModelDashboard --> TittyBankPanel[TittyBankPanel: BalanceCard, TransactionHistory, BuyLoveCoinsModal
useTittyBank]
  ModelDashboard --> ProfileGallery[ProfileGallery: MediaGalleryCard, Deduplication
useMedia]
  ModelDashboard --> FlaggedContentAlerts[FlaggedContentAlerts
useFlaggedContent]

  MainContent --> ClassifiedDashboard[ClassifiedDashboard]
  ClassifiedDashboard --> DashboardOverview2[DashboardOverview: SavedListingsCard, FavoritedModelsCard, AccountInfoCard
useUserProfile, useListings]
  ClassifiedDashboard --> ListingsPanel2[ListingsPanel
useListings]
  ListingsPanel2 --> ListingCard2[ListingCard: MediaCarousel, HighlightBadge, SpecialsBadge, AvailableNowBadge, QuickView --> ProfileModal
useMedia, useUpgrades]
  ClassifiedDashboard --> SearchFilters[SearchFilters: CategoryDropdown, LocationDropdown, SpecialsFilter, PaidListingsFilter]
  ClassifiedDashboard --> ProfileModal[ProfileModal: ModelInfo, MediaGallery, UpgradeIcons, AvailableNow/Badge]
Key Components:
	•	ListingCard: Reused for both dashboards; Model version includes edit/delete, Classified User version includes QuickView.
	•	MediaCarousel: Rotates images for Slideshow upgrade (2–3 sec interval).
	•	AvailableNowToggle: Shows countdown timer; auto-disables after 4 hours.
	•	BumpButton: Displays cooldown or triggers Bump Anytime modal.
	•	UpgradeCard: Shows cost with VIP/Elite discounts; triggers purchase modal.
	•	ProfileGallery: Deduplicates media using hashes.
	•	FlaggedContentAlerts: Displays on page reload for moderation.
Hooks:
Hook
Purpose
API Calls
useUserProfile
Fetch user profile and tier
GET /user/profile
useTittyBank
Fetch balance and transactions
GET /tittybank
useListings
Fetch user listings with media/upgrades
GET /listings?user_id=, GET /listing/:id
useUpgrades
Fetch available/active upgrades
GET /upgrades, GET /listing/:id/upgrades
useMedia
Fetch media for listings/profile
GET /listing/:id (includes media)
useFlaggedContent
Fetch flagged content alerts (Models)
GET /flagged_content (reload only)
5. Feature-Specific Logic
Upgrades:
	•	Purchase Flow:
	1	User selects upgrade in UpgradePanel.
	2	Check balance via useTittyBank.
	3	POST /listing/:id/upgrade deducts coins, inserts into listing_upgrades.
	4	Refresh useUpgrades to update badges.
	•	Multiple Purchases: Extend expires_at in listing_upgrades.
	•	Paid Listing Upgrade: Sets listings.is_paid_listing = true for Free-tier visibility in Paid Listing Filter.
	•	Discounts: Apply tiers.discount_upgrades for VIP/Elite tiers.
Titty Bank / Love Coins:
	•	Purchase Flow:
	1	User clicks “Buy Love Coins” in TittyBankPanel.
	2	POST /tittybank/purchase generates Bitcoin invoice.
	3	Webhook confirms payment, updates titty_bank_transactions and balance.
	4	Refresh useTittyBank.
	•	Escalation: If balance not updated after 12 hours, users request admin review via Directus.
	•	Atomicity: Ensure coin deductions and upgrades are processed together.
Available Now:
	•	Toggle Flow:
	1	User toggles via AvailableNowToggle → POST /available-now/:listing_id/toggle.
	2	Update listings.available_now_active, available_now_ends_at.
	3	Scheduled task (every 5 min) disables expired entries.
	•	Free Tier: Enforce available_now_cooldown before re-enabling.
	•	Paid Tiers: No cooldown.
	•	Frontend: Display countdown timer in AvailableNowToggle.
Bumps:
	•	Normal Bump:
	1	User clicks BumpButton → POST /listing/:id/bump.
	2	Check bump_next_available against tiers.bump_cooldown_minutes.
	3	Update listings.bump_next_available and reorder listing.
	•	Bump Anytime: Immediate bump without resetting cooldown; requires confirmation modal.
	•	Frontend: Refresh useListings to update order.
Paid Listing Filter:
	•	Filter listings for paid tiers or Free-tier with is_paid_listing = true.
	•	Frontend: Include PaidListingsFilter toggle in SearchFilters.
Media Handling:
	•	Upload Flow:
	1	ProfileGallery/ListingCard sends file to POST /media/upload.
	2	Store in Bunny.net, generate hash for deduplication, insert into media.
	3	Refresh useMedia to update gallery or carousel.
	•	Deduplication: Apply to ProfileGallery using media.hash; listings allow duplicates.
	•	Optimization: Bunny.net handles compression and thumbnails.
Reactive Moderation:
	•	Flow:
	1	User flags via FlagButton → POST /flag/:listing_id.
	2	Insert into flagged_content.
	3	Model sees alert in FlaggedContentAlerts on reload (useFlaggedContent).
	4	Admin reviews via Directus, updates reviewed_by, reviewed_at, action_taken.
	•	Frontend: Alerts are read-only.
6. Scheduled Tasks
Task
Purpose
Implementation
Auto-disable Available Now
Set available_now_active = false after 4h
Supabase Edge Function, cron every 5 min
Bump Cooldown Enforcement
Prevent bumps before cooldown expires
Backend validation on POST /bump
Upgrade Expiration
Deactivate time-limited upgrades
Supabase Edge Function, cron daily
Banner Rotation
Rotate homepage/category banners
Frontend timer or backend query
7. Admin Dashboard (Directus)
	•	Tables Managed:
	◦	users: CRUD, assign tiers, deactivate accounts.
	◦	tiers: Configure limits and discounts.
	◦	listings: View/edit/delete.
	◦	listing_upgrades: Monitor active upgrades.
	◦	flagged_content: Review/resolve reports.
	◦	upgrades: Manage types, costs, durations.
	◦	titty_bank_transactions: Audit transactions.
	◦	banners: Manage homepage/category banners.
	•	Analytics: Optional reporting for views, upgrade ROI, revenue per tier.
8. Hosting & Deployment
Component
Hosting/Service
Notes
Frontend
Vercel / Cloudflare Pages
Next.js with SSR/SSG for performance
Backend/Database
Supabase (EU for GDPR)
Postgres with RLS; Edge Functions for APIs
Media Storage
Bunny.net
CDN + storage; compression, thumbnails
Bitcoin Gateway
BTCPay Server / OpenNode
Self-hosted or GDPR-compliant; webhooks
Scheduled Tasks
Supabase Cron / Cloudflare Workers
Handle timers for Available Now, upgrades
Monitoring
Sentry / Vercel Analytics
Error tracking and performance monitoring
9. Visual Diagram (Mermaid.js)
flowchart TD
  subgraph DB[Supabase Database]
    USERS[users: id, email, role, tier_id]
    TIERS[tiers: id, name, max_ads, max_images, bump_cooldown_minutes]
    LISTINGS[listings: id, user_id, category_id, is_highlighted, available_now_active]
    LISTING_UPGRADES[listing_upgrades: listing_id, upgrade_id, expires_at]
    MEDIA[media: listing_id, url, hash]
    FLAGGED[flagged_content: listing_id, reason]
    CATEGORIES[categories: id, name, parent_id]
    LOCATIONS[locations: id, country, city]
    UPGRADES[upgrades: id, name, cost]
    TITTYBANK[titty_bank_transactions: user_id, amount, related_listing_id]
  end

  subgraph FE[Frontend: Next.js]
    DASHBOARD[Dashboard: Header, Sidebar, MainContent]
    subgraph MODELS[Model Dashboard]
      MD_OVERVIEW[Overview: TotalListings, ActiveUpgrades, TittyBank]
      MD_LISTINGS[Listings: ListingCard, BumpButton, AvailableNowToggle]
      MD_UPGRADES[Upgrades: UpgradeCard, Purchase]
      MD_TITTY[Titty Bank: Balance, Transactions, BuyLoveCoins]
      MD_GALLERY[ProfileGallery: MediaGalleryCard]
      MD_ALERTS[FlaggedContentAlerts]
    end
    subgraph CLASSIFIED[Classified Dashboard]
      CU_OVERVIEW[Overview: SavedListings, FavoritedModels]
      CU_LISTINGS[Listings: ListingCard, SearchFilters]
      CU_PROFILE[ProfileModal: ModelInfo, MediaGallery]
    end
  end

  subgraph ADMIN[Directus Admin]
    ADMIN_REVIEW[Review Flagged Content]
    ADMIN_MANAGE[Manage Users, Tiers, Upgrades, Banners]
  end

  USERS -->|tier_id| TIERS
  USERS -->|user_id| LISTINGS
  USERS -->|user_id| TITTYBANK
  LISTINGS -->|category_id| CATEGORIES
  LISTINGS -->|location_id| LOCATIONS
  LISTINGS -->|listing_id| LISTING_UPGRADES
  LISTINGS -->|listing_id| MEDIA
  LISTINGS -->|listing_id| FLAGGED
  LISTING_UPGRADES -->|upgrade_id| UPGRADES
  TITTYBANK -->|related_listing_id| LISTINGS

  DASHBOARD --> MODELS
  DASHBOARD --> CLASSIFIED
  MD_OVERVIEW --> LISTINGS
  MD_OVERVIEW --> TITTYBANK
  MD_LISTINGS --> LISTINGS
  MD_LISTINGS --> MEDIA
  MD_UPGRADES --> UPGRADES
  MD_UPGRADES --> TITTYBANK
  MD_TITTY --> TITTYBANK
  MD_GALLERY --> MEDIA
  MD_ALERTS --> FLAGGED
  CU_OVERVIEW --> LISTINGS
  CU_LISTINGS --> LISTINGS
  CU_LISTINGS --> MEDIA
  CU_PROFILE --> MEDIA
  ADMIN_REVIEW --> FLAGGED
  ADMIN_MANAGE --> USERS
  ADMIN_MANAGE --> TIERS
  ADMIN_MANAGE --> UPGRADES
